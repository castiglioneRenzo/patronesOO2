@startuml
!theme vibrant

skin rose

title Classes - Class Diagram


class ProductoFinanciero {
  -fechaOperacion: Date
  +<<abstract>>ganancia(montoInicial Real): Real
}

class CompraDolares {
  -valorCompra: Real
  +ganancia(montoInicial: Real): Real
}

class CompraPesos{
  -valorCompra: Real
  +ganancia(montoInicial: Real): Real
}

class PlazoFijo{
  -cantidadDias: Integer
  -interes: Real
  +ganancia(montoInicial: Real): Real
}

class PlazoFijoRenovable{
  -cantidadDias: Integer
  -interes: Real
  +ganancia(montoInicial: Real): Real
}

class ProductoCombinado{
  -productos: List<ProductoFinanciero>
  +ganancia(montoInicial: Real): Real
}

class Director{
	-builder: Builder
	+Director(builer: Builder)
	+setBuilder(builder: Builder): void
	+make(type: String): void
}
interface Builder{
	nuevoProductoCombinado(): void
	nuevaCompraDolares(valorCompra: double): void
	nuevaCompraPesos(valorCompra: double): void
	nuevoPlazoFijo(cantDias: int, interes: double): void
	nuevoPlazoFijoRenovable(cantDias: int, interes: double): void
}
class ProductoCombinadoBuilder{
	-productoCombinado: ProductoCombinado
	-productos: List<ProductoFinanciero>
	+nuevoProductoCombinado(): void
	+nuevaCompraDolares(valorCompra: double): void
	+nuevaCompraPesos(valorCompra: double): void
	+nuevoPlazoFijo(cantDias: int, interes: double): void
	+nuevoPlazoFijoRenovable(cantDias: int, interes: double): void
	+getResult(): ProductoCombinado
}

Builder <|.. ProductoCombinadoBuilder
Builder <-- Director

ProductoFinanciero <|-- CompraDolares
ProductoFinanciero <|-- CompraPesos
ProductoFinanciero <|-- PlazoFijo
ProductoFinanciero <|-- PlazoFijoRenovable
ProductoFinanciero <|-- ProductoCombinado
ProductoFinanciero "1..*" *-- ProductoCombinado
ProductoCombinado <-- ProductoCombinadoBuilder


@enduml